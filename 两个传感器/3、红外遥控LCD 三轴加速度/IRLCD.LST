C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE IRLCD
OBJECT MODULE PLACED IN IRLCD.OBJ
COMPILER INVOKED BY: N:\keil\C51\BIN\C51.EXE IRLCD.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /********************************************************************************
   2          *          lcd1602显示 遥控键值读取器                                          *
   3          *         lcd1602显示 遥控器接p3.2                                             *
   4          ********************************************************************************/
   5          
   6          #include <reg51.h>
   7          #include <intrins.h>
   8          #include  <math.h>    //Keil library  
   9          #include  <stdio.h>   //Keil library
  10          
  11          
  12          #define uchar unsigned char
  13          #define uint  unsigned int
  14          
  15          
  16          sbit IRIN = P3^2;         //红外接收器数据线
  17          
  18          uchar IRCOM[7];
  19          
  20          sbit E=P2^3;
  21          sbit RW=P2^4;
  22          sbit RS=P2^5;
  23          
  24          #define LCM_Data  P0
  25          
  26          uchar code  cdis1[ ] = {"  Red Control  "};
  27          uchar code  cdis2[ ] = {"  IR-CODE:--H  "};
  28          #define   DataPort P0    //LCD1602数据端口
  29          
  30          sbit      SCL=P2^1;      //IIC时钟引脚定义
  31          sbit      SDA=P2^0;      //IIC数据引脚定义
  32          
  33          sbit      LCM_RS=P2^5;   //LCD1602命令端口              
  34          sbit      LCM_RW=P2^4;   //LCD1602命令端口              
  35          sbit      LCM_EN=P2^3;   //LCD1602命令端口
  36          
  37          #define SlaveAddress   0xA6       //定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改
  38                                        //ALT  ADDRESS引脚接地时地址为0xA6，接电源时地址为0x3A
  39          typedef unsigned char  BYTE;
  40          typedef unsigned short WORD;
  41          
  42          BYTE BUF[8];                         //接收数据缓存区           
  43          uchar ge,shi,bai,qian,wan;           //显示变量
  44          int  dis_data;                       //变量
  45          
  46          void delay1(unsigned int k);
  47          void InitLcd();                      //初始化lcd1602
  48          void Init_ADXL345(void);             //初始化ADXL345
  49          
  50          void WriteDataLCM(uchar dataW);
  51          void WriteCommandLCM(uchar CMD);
  52          void DisplayOneChar(uchar X,uchar Y,uchar DData);
  53          void conversion1(uint temp_data);
  54          
  55          void  Single_Write_ADXL345(uchar REG_Address,uchar REG_data);   //单个写入数据
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 2   

  56          uchar Single_Read_ADXL345(uchar REG_Address);                   //单个读取内部寄存器数据
  57          void  Multiple_Read_ADXL345();                                  //连续的读取内部寄存器数据
  58          //------------------------------------
  59          void Delay5us();
  60          void Delay5ms();
  61          void ADXL345_Start();
  62          void ADXL345_Stop();
  63          void ADXL345_SendACK(bit ack);
  64          bit  ADXL345_RecvACK();
  65          void ADXL345_SendByte(BYTE dat);
  66          BYTE ADXL345_RecvByte();
  67          void ADXL345_ReadPage();
  68          void ADXL345_WritePage();
  69          //-----------------------------------
  70          
  71          
  72          //延时设置
  73          void Delay(unsigned int t)   // delay 40us
  74          {
  75   1       for(;t!=0;t--) ;
  76   1      }
  77          void conversion1(uint temp_data)  
  78          {  
  79   1          wan=temp_data/10000+0x30 ;
  80   1          temp_data=temp_data%10000;   //取余运算
  81   1              qian=temp_data/1000+0x30 ;
  82   1          temp_data=temp_data%1000;    //取余运算
  83   1          bai=temp_data/100+0x30   ;
  84   1          temp_data=temp_data%100;     //取余运算
  85   1          shi=temp_data/10+0x30    ;
  86   1          temp_data=temp_data%10;      //取余运算
  87   1          ge=temp_data+0x30;  
  88   1      }
  89          
  90          
  91          void delay1(unsigned int k)     
  92          {                                               
  93   1      unsigned int i,j;                               
  94   1              for(i=0;i<k;i++)
  95   1              {                       
  96   2              for(j=0;j<121;j++)                      
  97   2              {;}}                                            
  98   1      }
  99          
 100           /*******************************/
 101          void WriteCommandLCM(uchar CMD)
 102          {                                       
 103   1              LCM_RS=0;
 104   1              LCM_RW=0;
 105   1              _nop_();
 106   1              DataPort=CMD;
 107   1              _nop_();        
 108   1              LCM_EN=1
 109   1              ;_nop_();_nop_();
 110   1              LCM_EN=0;
 111   1              delay1(1);
 112   1      }void WriteDataLCM(uchar dataW)
 113          {                                       
 114   1              LCM_RS=1;
 115   1              LCM_RW=0;
 116   1              _nop_();
 117   1              DataPort=dataW;
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 3   

 118   1              _nop_();        
 119   1              LCM_EN=1;
 120   1              _nop_();_nop_();
 121   1              LCM_EN=0;
 122   1              delay1(1);
 123   1      }               
 124          /***********************************/
 125          void InitLcd()                          
 126          {                       
 127   1              WriteCommandLCM(0x30);  
 128   1              WriteCommandLCM(0x30);  
 129   1              WriteCommandLCM(0x38);  
 130   1              WriteCommandLCM(0x08);  
 131   1              WriteCommandLCM(0x0c);
 132   1              WriteCommandLCM(0x01);  
 133   1              WriteCommandLCM(0x06);  
 134   1      
 135   1      }                       
 136          /***********************************/
 137          void DisplayOneChar(uchar X,uchar Y,uchar DData)
 138          {                                               
 139   1              Y&=1;                                           
 140   1              X&=15;                                          
 141   1              if(Y)X|=0x40;                                   
 142   1              X|=0x80;                        
 143   1              WriteCommandLCM(X);             
 144   1              WriteDataLCM(DData);            
 145   1      }/**************************************
 146          延时5微秒(STC90C52RC---12MHz---12T)
 147          不同的工作环境,需要调整此函数，注意时钟过快时需要修改
 148          当改用1T的MCU时,请调整此延时函数
 149          **************************************/
 150          void Delay5us()
 151          {
 152   1          _nop_();_nop_();_nop_();_nop_();
 153   1          _nop_();_nop_();_nop_();_nop_();
 154   1              _nop_();_nop_();_nop_();_nop_();
 155   1      }
 156          
 157          /**************************************
 158          延时5毫秒(STC90C52RC@12M)
 159          不同的工作环境,需要调整此函数
 160          当改用1T的MCU时,请调整此延时函数
 161          **************************************/
 162          void Delay5ms()
 163          {
 164   1          WORD n = 560;
 165   1      
 166   1          while (n--);
 167   1      }
 168          
 169          /**************************************
 170          起始信号
 171          **************************************/
 172          void ADXL345_Start()
 173          {
 174   1          SDA = 1;                    //拉高数据线
 175   1          SCL = 1;                    //拉高时钟线
 176   1          Delay5us();                 //延时
 177   1          SDA = 0;                    //产生下降沿
 178   1          Delay5us();                 //延时
 179   1          SCL = 0;                    //拉低时钟线
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 4   

 180   1      }
 181          
 182          /**************************************
 183          停止信号
 184          **************************************/
 185          void ADXL345_Stop()
 186          {
 187   1          SDA = 0;                    //拉低数据线
 188   1          SCL = 1;                    //拉高时钟线
 189   1          Delay5us();                 //延时
 190   1          SDA = 1;                    //产生上升沿
 191   1          Delay5us();                 //延时
 192   1      }
 193          
 194          /**************************************
 195          发送应答信号
 196          入口参数:ack (0:ACK 1:NAK)
 197          **************************************/
 198          void ADXL345_SendACK(bit ack)
 199          {
 200   1          SDA = ack;                  //写应答信号
 201   1          SCL = 1;                    //拉高时钟线
 202   1          Delay5us();                 //延时
 203   1          SCL = 0;                    //拉低时钟线
 204   1          Delay5us();                 //延时
 205   1      }
 206          
 207          /**************************************
 208          接收应答信号
 209          **************************************/
 210          bit ADXL345_RecvACK()
 211          {
 212   1          SCL = 1;                    //拉高时钟线
 213   1          Delay5us();                 //延时
 214   1          CY = SDA;                   //读应答信号
 215   1          SCL = 0;                    //拉低时钟线
 216   1          Delay5us();                 //延时
 217   1      
 218   1          return CY;
 219   1      }
 220          
 221          /**************************************
 222          向IIC总线发送一个字节数据
 223          **************************************/
 224          void ADXL345_SendByte(BYTE dat)
 225          {
 226   1          BYTE i;
 227   1      
 228   1          for (i=0; i<8; i++)         //8位计数器
 229   1          {
 230   2              dat <<= 1;              //移出数据的最高位
 231   2              SDA = CY;               //送数据口
 232   2              SCL = 1;                //拉高时钟线
 233   2              Delay5us();             //延时
 234   2              SCL = 0;                //拉低时钟线
 235   2              Delay5us();             //延时
 236   2          }
 237   1          ADXL345_RecvACK();
 238   1      }
 239          
 240          /**************************************
 241          从IIC总线接收一个字节数据
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 5   

 242          **************************************/
 243          BYTE ADXL345_RecvByte()
 244          {
 245   1          BYTE i;
 246   1          BYTE dat = 0;
 247   1      
 248   1          SDA = 1;                    //使能内部上拉,准备读取数据,
 249   1          for (i=0; i<8; i++)         //8位计数器
 250   1          {
 251   2              dat <<= 1;
 252   2              SCL = 1;                //拉高时钟线
 253   2              Delay5us();             //延时
 254   2              dat |= SDA;             //读数据               
 255   2              SCL = 0;                //拉低时钟线
 256   2              Delay5us();             //延时
 257   2          }
 258   1          return dat;
 259   1      }
 260          
 261          //******单字节写入*******************************************
 262          
 263          void Single_Write_ADXL345(uchar REG_Address,uchar REG_data)
 264          {
 265   1          ADXL345_Start();                  //起始信号
 266   1          ADXL345_SendByte(SlaveAddress);   //发送设备地址+写信号
 267   1          ADXL345_SendByte(REG_Address);    //内部寄存器地址，请参考中文pdf22页 
 268   1          ADXL345_SendByte(REG_data);       //内部寄存器数据，请参考中文pdf22页 
 269   1          ADXL345_Stop();                   //发送停止信号
 270   1      }
 271          
 272          //********单字节读取*****************************************
 273          uchar Single_Read_ADXL345(uchar REG_Address)
 274          {  uchar REG_data;
 275   1          ADXL345_Start();                          //起始信号
 276   1          ADXL345_SendByte(SlaveAddress);           //发送设备地址+写信号
 277   1          ADXL345_SendByte(REG_Address);            //发送存储单元地址，从0开始       
 278   1          ADXL345_Start();                          //起始信号
 279   1          ADXL345_SendByte(SlaveAddress+1);         //发送设备地址+读信号
 280   1          REG_data=ADXL345_RecvByte();              //读出寄存器数据
 281   1              ADXL345_SendACK(1);   
 282   1              ADXL345_Stop();                           //停止信号
 283   1          return REG_data; 
 284   1      }
 285          //*********************************************************
 286          //
 287          //连续读出ADXL345内部加速度数据，地址范围0x32~0x37
 288          //
 289          //*********************************************************
 290          void Multiple_read_ADXL345(void)
 291          {   uchar i;
 292   1          ADXL345_Start();                          //起始信号
 293   1          ADXL345_SendByte(SlaveAddress);           //发送设备地址+写信号
 294   1          ADXL345_SendByte(0x32);                   //发送存储单元地址，从0x32开始    
 295   1          ADXL345_Start();                          //起始信号
 296   1          ADXL345_SendByte(SlaveAddress+1);         //发送设备地址+读信号
 297   1               for (i=0; i<6; i++)                      //连续读取6个地址数据，存储中BUF
 298   1          {
 299   2              BUF[i] = ADXL345_RecvByte();          //BUF[0]存储0x32地址中的数据
 300   2              if (i == 5)
 301   2              {
 302   3                 ADXL345_SendACK(1);                //最后一个数据需要回NOACK
 303   3              }
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 6   

 304   2              else
 305   2              {
 306   3                ADXL345_SendACK(0);                //回应ACK
 307   3             }
 308   2         }
 309   1          ADXL345_Stop();                          //停止信号
 310   1          Delay5ms();
 311   1      }
 312          
 313          
 314          //*****************************************************************
 315          
 316          //初始化ADXL345，根据需要请参考pdf进行修改************************
 317          void Init_ADXL345()
 318          {
 319   1         Single_Write_ADXL345(0x31,0x0B);   //测量范围,正负16g，13位模式
 320   1         Single_Write_ADXL345(0x2C,0x08);   //速率设定为12.5 参考pdf13页
 321   1         Single_Write_ADXL345(0x2D,0x08);   //选择电源模式   参考pdf24页
 322   1         Single_Write_ADXL345(0x2E,0x80);   //使能 DATA_READY 中断
 323   1         Single_Write_ADXL345(0x1E,0x00);   //X 偏移量 根据测试传感器的状态写入pdf29页
 324   1         Single_Write_ADXL345(0x1F,0x00);   //Y 偏移量 根据测试传感器的状态写入pdf29页
 325   1         Single_Write_ADXL345(0x20,0x05);   //Z 偏移量 根据测试传感器的状态写入pdf29页
 326   1      }
 327          //***********************************************************************
 328          //显示x轴
 329          void display_x()
 330          {   float temp;
 331   1          dis_data=(BUF[1]<<8)+BUF[0];  //合成数据   
 332   1              if(dis_data<0){
 333   2              dis_data=-dis_data;
 334   2          DisplayOneChar(10,0,'-');      //显示正负符号位
 335   2              }
 336   1              else DisplayOneChar(10,0,' '); //显示空格
 337   1      
 338   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 339   1          conversion1(temp);          //转换出显示需要的数据
 340   1                      DisplayOneChar(8,0,'X');
 341   1          DisplayOneChar(9,0,':'); 
 342   1          DisplayOneChar(11,0,qian); 
 343   1                      DisplayOneChar(12,0,'.'); 
 344   1          DisplayOneChar(13,0,bai); 
 345   1          DisplayOneChar(14,0,shi); 
 346   1                      DisplayOneChar(15,0,' '); 
 347   1      }
 348          
 349          //***********************************************************************
 350          //显示y轴
 351          void display_y()
 352          {     float temp;
 353   1          dis_data=(BUF[3]<<8)+BUF[2];  //合成数据   
 354   1              if(dis_data<0){
 355   2              dis_data=-dis_data;
 356   2          DisplayOneChar(2,1,'-');      //显示正负符号位
 357   2              }
 358   1              else DisplayOneChar(2,1,' '); //显示空格
 359   1      
 360   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 361   1          conversion1(temp);          //转换出显示需要的数据
 362   1                      DisplayOneChar(0,1,'Y');   //第1行，第0列 显示y
 363   1          DisplayOneChar(1,1,':'); 
 364   1          DisplayOneChar(3,1,qian); 
 365   1                      DisplayOneChar(4,1,'.'); 
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 7   

 366   1          DisplayOneChar(5,1,bai); 
 367   1          DisplayOneChar(6,1,shi);  
 368   1                      DisplayOneChar(7,1,' ');  
 369   1      }
 370          
 371          //***********************************************************************
 372          //显示z轴
 373          void display_z()
 374          {
 375   1          float temp;
 376   1          dis_data=(BUF[5]<<8)+BUF[4];    //合成数据   
 377   1              if(dis_data<0){
 378   2              dis_data=-dis_data;
 379   2          DisplayOneChar(10,1,'-');       //显示负符号位
 380   2              }
 381   1              else DisplayOneChar(10,1,' ');  //显示空格
 382   1      
 383   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 384   1          conversion1(temp);          //转换出显示需要的数据
 385   1                      DisplayOneChar(8,1,'Z');  //第0行，第10列 显示Z
 386   1          DisplayOneChar(9,1,':'); 
 387   1          DisplayOneChar(11,1,qian); 
 388   1                      DisplayOneChar(12,1,'.'); 
 389   1          DisplayOneChar(13,1,bai); 
 390   1          DisplayOneChar(14,1,shi); 
 391   1                      DisplayOneChar(15,1,' ');  
 392   1      }               
 393          
 394          
 395          
 396                  
 397          //写指令
 398          void WriteCommandLCM1(unsigned char ch)
 399          {
 400   1         RS=0;
 401   1         RW=0;
 402   1         E=1;
 403   1         LCM_Data=ch;
 404   1         Delay(1);
 405   1         E=0;
 406   1         Delay(100);  //delay 40us
 407   1      }
 408          
 409          //写数据
 410          void WriteDataLCM1(unsigned char ch)
 411          {  RS=1;
 412   1         RW=0;
 413   1         E=1;
 414   1         LCM_Data=ch;
 415   1         Delay(1);
 416   1         E=0;
 417   1         Delay(100); //delay 40us
 418   1      }
 419          
 420          void DisplayOneChar1(uchar X,uchar Y,uchar DData)
 421          {                                               
 422   1              Y&=1;                                           
 423   1              X&=15;                                          
 424   1              if(Y)X|=0x40;                                   
 425   1              X|=0x80;                        
 426   1              WriteCommandLCM1(X);            
 427   1              WriteDataLCM1(DData);           
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 8   

 428   1      }                               
 429          
 430          /*******************************************************************/
 431          /*  LCD初始化设定                                                  */
 432          /*******************************************************************/
 433          void InitLcd1()
 434          {
 435   1       WriteCommandLCM1(0x30);                 //功能设置，设置8位数据接口，
 436   1       WriteCommandLCM1(0x30);
 437   1       WriteCommandLCM1(0x30);
 438   1       WriteCommandLCM1(0x38);        //设置工作方式,8位数据接口，两行显示，5*7点阵
 439   1       WriteCommandLCM1(0x08);        //关显示，关闭显示，关闭光标，关闭闪烁
 440   1       WriteCommandLCM1(0x0c); //显示状态设置，开显示，关闭光标与闪烁
 441   1       WriteCommandLCM1(0x01); //清屏
 442   1       WriteCommandLCM1(0x06); //输入方式设置 ,AC自动增一，画面不动
 443   1      }
 444          
 445          
 446          
 447          main()
 448          {
 449   1         uchar m;
 450   1          
 451   1          IRIN=1;                    //I/O口初始化
 452   1      
 453   1          Delay(10);                 //延时
 454   1          InitLcd1();                //初始化LCD             
 455   1      
 456   1           m = 0;
 457   1          while(cdis1[m] != '\0')
 458   1           {                         //显示字符
 459   2             WriteDataLCM1(cdis1[m]);
 460   2             m++;
 461   2           }
 462   1      
 463   1          //lcd_pos(0x40);             //设置显示位置为第二行第1个字符
 464   1              WriteCommandLCM1(0x40 | 0x80);
 465   1           m = 0;
 466   1          while(cdis2[m] != '\0')
 467   1           {
 468   2             WriteDataLCM1(cdis2[m]);      //显示字符
 469   2             m++;
 470   2           }
 471   1         
 472   1      
 473   1              IE = 0x81;                 //允许总中断中断,使能 INT0 外部中断
 474   1              TCON = 0x01;               //触发方式为脉冲负边沿触发
 475   1      
 476   1         while(1)     ;
 477   1      
 478   1      } //end main
 479          
 480          /**********************************************************/
 481          void IR_IN() interrupt 0 using 0
 482          {
 483   1        unsigned char j,k,N=0;
 484   1           EX0 = 0;   
 485   1               Delay(200);
 486   1               if (IRIN==1) 
 487   1           { EX0 =1;
 488   2                 return;
 489   2                } 
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 9   

 490   1                                 //确认IR信号出现
 491   1        while (!IRIN)            //等IR变为高电平，跳过9ms的前导低电平信号。
 492   1          {Delay(13);}
 493   1      
 494   1       for (j=0;j<4;j++)         //收集四组数据
 495   1       { 
 496   2        for (k=0;k<8;k++)        //每组数据有8位
 497   2        {
 498   3         while (IRIN)            //等 IR 变为低电平，跳过4.5ms的前导高电平信号。
 499   3           {Delay(13);}
 500   3          while (!IRIN)          //等 IR 变为高电平
 501   3           {Delay(13);}
 502   3           while (IRIN)           //计算IR高电平时长
 503   3            {
 504   4         Delay(13);
 505   4          N++;           
 506   4          if (N>=30)
 507   4               { EX0=1;
 508   5               return;}                  //0.14ms计数过长自动离开。
 509   4            }                        //高电平计数完毕                
 510   3           IRCOM[j]=IRCOM[j] >> 1;                  //数据最高位补“0”
 511   3           if (N>=8) {IRCOM[j] = IRCOM[j] | 0x80;}  //数据最高位补“1”
 512   3           N=0;
 513   3        }//end for k
 514   2       }//end for j
 515   1         
 516   1         if (IRCOM[2]!=~IRCOM[3])
 517   1         { EX0=1;
 518   2           return; }
 519   1      
 520   1         IRCOM[5]=IRCOM[2] & 0x0F;     //取键码的低四位
 521   1         IRCOM[6]=IRCOM[2] >> 4;       //右移4次，高四位变为低四位
 522   1      
 523   1         if(IRCOM[5]>9)
 524   1          { IRCOM[5]=IRCOM[5]+0x37;}
 525   1         else
 526   1                IRCOM[5]=IRCOM[5]+0x30;
 527   1      
 528   1         if(IRCOM[6]>9)
 529   1          { IRCOM[6]=IRCOM[6]+0x37;}
 530   1         else
 531   1                IRCOM[6]=IRCOM[6]+0x30;
 532   1      
 533   1              if(IRCOM[5] == 'E' && IRCOM[6]  == '5'){
 534   2                         uchar devid;
 535   2              delay1(500);                            //上电延时              
 536   2              InitLcd();                      //液晶初始化ADXL345
 537   2              
 538   2              DisplayOneChar(0,0,'A');
 539   2              DisplayOneChar(1,0,'D'); 
 540   2              DisplayOneChar(2,0,'X'); 
 541   2              DisplayOneChar(3,0,'L'); 
 542   2              DisplayOneChar(4,0,'3'); 
 543   2              DisplayOneChar(5,0,'4');  
 544   2              DisplayOneChar(6,0,'5'); 
 545   2              
 546   2              //Init_ADXL345();                       //初始化ADXL345
 547   2              //devid=Single_Read_ADXL345(0X00);      //读出的数据为0XE5,表示正确
 548   2              while(1)                                //循环
 549   2              { 
 550   3                      DisplayOneChar(0,0,'A');
 551   3                      DisplayOneChar(1,0,'D'); 
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 10  

 552   3                      DisplayOneChar(2,0,'X'); 
 553   3                      DisplayOneChar(3,0,'L'); 
 554   3                      DisplayOneChar(4,0,'3'); 
 555   3                      DisplayOneChar(5,0,'4');  
 556   3                      DisplayOneChar(6,0,'5'); 
 557   3                      
 558   3                      Init_ADXL345();                         //初始化ADXL345
 559   3                      devid=Single_Read_ADXL345(0X00);        //读出的数据为0XE5,表示正确
 560   3                      if(devid!=0XE5)
 561   3                      {                       
 562   4                              DisplayOneChar(8,0,'N');
 563   4                              DisplayOneChar(9,0,'o');                
 564   4                              DisplayOneChar(10,0,' ');               
 565   4                              DisplayOneChar(11,0,'F');
 566   4                              DisplayOneChar(12,0,'i');
 567   4                              DisplayOneChar(13,0,'n');
 568   4                              DisplayOneChar(14,0,'d');               
 569   4                              DisplayOneChar(15,0,'!');               
 570   4                              //
 571   4                              DisplayOneChar(0,1,' ');   //第1行，第0列 显示y
 572   4                              DisplayOneChar(1,1,' '); 
 573   4                              DisplayOneChar(2,1,' ');        
 574   4                              DisplayOneChar(3,1,' '); 
 575   4                              DisplayOneChar(4,1,' '); 
 576   4                              DisplayOneChar(5,1,' '); 
 577   4                              DisplayOneChar(6,1,' ');  
 578   4                              DisplayOneChar(7,1,' ');  
 579   4                              DisplayOneChar(8,1,' ');  //第0行，第10列 显示Z
 580   4                              DisplayOneChar(9,1,' '); 
 581   4                              DisplayOneChar(11,1,' '); 
 582   4                              DisplayOneChar(12,1,' '); 
 583   4                              DisplayOneChar(13,1,' '); 
 584   4                              DisplayOneChar(14,1,' '); 
 585   4                              DisplayOneChar(15,1,' ');                       
 586   4                              
 587   4                      }
 588   3                      else
 589   3                      {                       
 590   4                              Multiple_Read_ADXL345();        //连续读出数据，存储在BUF中
 591   4                              display_x();                    //---------显示X轴
 592   4                              display_y();                    //---------显示Y轴
 593   4                              display_z();                    //---------显示Z轴                          
 594   4                      }      
 595   3                      delay1(350);                            //延时  
 596   3              }
 597   2              }
 598   1                 
 599   1           DisplayOneChar1(10,1,IRCOM[6]);          //第一位数显示         
 600   1           DisplayOneChar1(11,1,IRCOM[5]);        //第二位数显示
 601   1      
 602   1           EX0 = 1; 
 603   1      } 
 604          
 605          
 606          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1648    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.01   IRLCD                                                                 11/22/2017 18:26:53 PAGE 11  

   DATA SIZE        =     22       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
