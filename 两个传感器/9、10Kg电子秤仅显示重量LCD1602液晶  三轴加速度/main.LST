C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: N:\keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include  <math.h>    //Keil library  
   4          #include  <stdio.h>   //Keil library    
   5          #include <string.h>
   6          #include "main.h"
   7          #include "LCD1602.h"
   8          #include "HX711.h"
   9          #include "keyboard.h"
  10          
  11          #define uchar unsigned char
  12          #define uint  unsigned int
  13          
  14          unsigned long HX711_Buffer = 0;
  15          unsigned long Weight_Maopi = 0;
  16          unsigned long Weight_Maopi_0 = 0;
  17          long Weight_Shiwu = 0;
  18          //键盘处理变量
  19          unsigned char keycode;
  20          unsigned char DotPos;                              //小数点标志及位置
  21          
  22          unsigned long idata price;     //单价，长整型值，单位为分   
  23          unsigned long idata money;     //总价，长整型值，单位为分
  24          //定义标识
  25          volatile bit FlagTest = 0;              //定时测试标志，每0.5秒置位，测完清0
  26          volatile bit FlagKeyPress = 0;  //有键按下标志，处理完毕清0
  27          //校准参数
  28          //因为不同的传感器特性曲线不是很一致，因此，每一个传感器需要矫正这里这个参数才能使测量值很准确。
  29          //当发现测试出来的重量偏大时，增加该数值。
  30          //如果测试出来的重量偏小时，减小改数值。
  31          //该值可以为小数
  32          #define GapValue 210.6
  33          sbit LED=P1^1;
  34          
  35          volatile bit ClearWeighFlag = 0; //传感器调零标志位，清除0漂
  36          
  37          #define   DataPort P0    //LCD1602数据端口
  38          
  39          sbit      SCL=P2^1;      //IIC时钟引脚定义
  40          sbit      SDA=P2^0;      //IIC数据引脚定义
  41          
  42          sbit      LCM_RS=P2^5;   //LCD1602命令端口              
  43          sbit      LCM_RW=P2^4;   //LCD1602命令端口              
  44          sbit      LCM_EN=P2^3;   //LCD1602命令端口
  45          
  46          #define SlaveAddress   0xA6       //定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改
  47                                        //ALT  ADDRESS引脚接地时地址为0xA6，接电源时地址为0x3A
  48          typedef unsigned char  BYTE;
  49          typedef unsigned short WORD;
  50          
  51          BYTE BUF[8];                         //接收数据缓存区           
  52          uchar ge,shi,bai,qian,wan;           //显示变量
  53          int  dis_data;                       //变量
  54          
  55          void delay(unsigned int k);
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 2   

  56          void InitLcd();                      //初始化lcd1602
  57          void Init_ADXL345(void);             //初始化ADXL345
  58          
  59          void WriteDataLCM(uchar dataW);
  60          void WriteCommandLCM(uchar CMD);
  61          void DisplayOneChar(uchar X,uchar Y,uchar DData);
  62          void conversion(uint temp_data);
  63          
  64          void  Single_Write_ADXL345(uchar REG_Address,uchar REG_data);   //单个写入数据
  65          uchar Single_Read_ADXL345(uchar REG_Address);                   //单个读取内部寄存器数据
  66          void  Multiple_Read_ADXL345();                                  //连续的读取内部寄存器数据
  67          //------------------------------------
  68          void Delay5us();
  69          void Delay5ms();
  70          void ADXL345_Start();
  71          void ADXL345_Stop();
  72          void ADXL345_SendACK(bit ack);
  73          bit  ADXL345_RecvACK();
  74          void ADXL345_SendByte(BYTE dat);
  75          BYTE ADXL345_RecvByte();
  76          void ADXL345_ReadPage();
  77          void ADXL345_WritePage();
  78          //-----------------------------------
  79          
  80          //*********************************************************
  81          void conversion(uint temp_data)  
  82          {  
  83   1          wan=temp_data/10000+0x30 ;
  84   1          temp_data=temp_data%10000;   //取余运算
  85   1              qian=temp_data/1000+0x30 ;
  86   1          temp_data=temp_data%1000;    //取余运算
  87   1          bai=temp_data/100+0x30   ;
  88   1          temp_data=temp_data%100;     //取余运算
  89   1          shi=temp_data/10+0x30    ;
  90   1          temp_data=temp_data%10;      //取余运算
  91   1          ge=temp_data+0x30;  
  92   1      }
  93          
  94          /*******************************/
  95          void delay(unsigned int k)      
  96          {                                               
  97   1      unsigned int i,j;                               
  98   1              for(i=0;i<k;i++)
  99   1              {                       
 100   2              for(j=0;j<121;j++)                      
 101   2              {;}}                                            
 102   1      }
 103                                                  
 104          /*******************************/
 105          void WriteCommandLCM(uchar CMD)
 106          {                                       
 107   1              LCM_RS=0;
 108   1              LCM_RW=0;
 109   1              _nop_();
 110   1              DataPort=CMD;
 111   1              _nop_();        
 112   1              LCM_EN=1
 113   1              ;_nop_();_nop_();
 114   1              LCM_EN=0;
 115   1              delay(1);
 116   1      }                                       
 117          /*******************************/
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 3   

 118          void WriteDataLCM(uchar dataW)
 119          {                                       
 120   1              LCM_RS=1;
 121   1              LCM_RW=0;
 122   1              _nop_();
 123   1              DataPort=dataW;
 124   1              _nop_();        
 125   1              LCM_EN=1;
 126   1              _nop_();_nop_();
 127   1              LCM_EN=0;
 128   1              delay(1);
 129   1      }               
 130          /***********************************/
 131          void InitLcd()                          
 132          {                       
 133   1              WriteCommandLCM(0x30);  
 134   1              WriteCommandLCM(0x30);  
 135   1              WriteCommandLCM(0x38);  
 136   1              WriteCommandLCM(0x08);  
 137   1              WriteCommandLCM(0x0c);
 138   1              WriteCommandLCM(0x01);  
 139   1              WriteCommandLCM(0x06);  
 140   1      
 141   1      }                       
 142          /***********************************/
 143          void DisplayOneChar(uchar X,uchar Y,uchar DData)
 144          {                                               
 145   1              Y&=1;                                           
 146   1              X&=15;                                          
 147   1              if(Y)X|=0x40;                                   
 148   1              X|=0x80;                        
 149   1              WriteCommandLCM(X);             
 150   1              WriteDataLCM(DData);            
 151   1      }                                               
 152          
 153          /**************************************
 154          延时5微秒(STC90C52RC---12MHz---12T)
 155          不同的工作环境,需要调整此函数，注意时钟过快时需要修改
 156          当改用1T的MCU时,请调整此延时函数
 157          **************************************/
 158          void Delay5us()
 159          {
 160   1          _nop_();_nop_();_nop_();_nop_();
 161   1          _nop_();_nop_();_nop_();_nop_();
 162   1              _nop_();_nop_();_nop_();_nop_();
 163   1      }
 164          
 165          /**************************************
 166          延时5毫秒(STC90C52RC@12M)
 167          不同的工作环境,需要调整此函数
 168          当改用1T的MCU时,请调整此延时函数
 169          **************************************/
 170          void Delay5ms()
 171          {
 172   1          WORD n = 560;
 173   1      
 174   1          while (n--);
 175   1      }
 176          
 177          /**************************************
 178          起始信号
 179          **************************************/
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 4   

 180          void ADXL345_Start()
 181          {
 182   1          SDA = 1;                    //拉高数据线
 183   1          SCL = 1;                    //拉高时钟线
 184   1          Delay5us();                 //延时
 185   1          SDA = 0;                    //产生下降沿
 186   1          Delay5us();                 //延时
 187   1          SCL = 0;                    //拉低时钟线
 188   1      }
 189          
 190          /**************************************
 191          停止信号
 192          **************************************/
 193          void ADXL345_Stop()
 194          {
 195   1          SDA = 0;                    //拉低数据线
 196   1          SCL = 1;                    //拉高时钟线
 197   1          Delay5us();                 //延时
 198   1          SDA = 1;                    //产生上升沿
 199   1          Delay5us();                 //延时
 200   1      }
 201          
 202          /**************************************
 203          发送应答信号
 204          入口参数:ack (0:ACK 1:NAK)
 205          **************************************/
 206          void ADXL345_SendACK(bit ack)
 207          {
 208   1          SDA = ack;                  //写应答信号
 209   1          SCL = 1;                    //拉高时钟线
 210   1          Delay5us();                 //延时
 211   1          SCL = 0;                    //拉低时钟线
 212   1          Delay5us();                 //延时
 213   1      }
 214          
 215          /**************************************
 216          接收应答信号
 217          **************************************/
 218          bit ADXL345_RecvACK()
 219          {
 220   1          SCL = 1;                    //拉高时钟线
 221   1          Delay5us();                 //延时
 222   1          CY = SDA;                   //读应答信号
 223   1          SCL = 0;                    //拉低时钟线
 224   1          Delay5us();                 //延时
 225   1      
 226   1          return CY;
 227   1      }
 228          
 229          /**************************************
 230          向IIC总线发送一个字节数据
 231          **************************************/
 232          void ADXL345_SendByte(BYTE dat)
 233          {
 234   1          BYTE i;
 235   1      
 236   1          for (i=0; i<8; i++)         //8位计数器
 237   1          {
 238   2              dat <<= 1;              //移出数据的最高位
 239   2              SDA = CY;               //送数据口
 240   2              SCL = 1;                //拉高时钟线
 241   2              Delay5us();             //延时
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 5   

 242   2              SCL = 0;                //拉低时钟线
 243   2              Delay5us();             //延时
 244   2          }
 245   1          ADXL345_RecvACK();
 246   1      }
 247          
 248          /**************************************
 249          从IIC总线接收一个字节数据
 250          **************************************/
 251          BYTE ADXL345_RecvByte()
 252          {
 253   1          BYTE i;
 254   1          BYTE dat = 0;
 255   1      
 256   1          SDA = 1;                    //使能内部上拉,准备读取数据,
 257   1          for (i=0; i<8; i++)         //8位计数器
 258   1          {
 259   2              dat <<= 1;
 260   2              SCL = 1;                //拉高时钟线
 261   2              Delay5us();             //延时
 262   2              dat |= SDA;             //读数据               
 263   2              SCL = 0;                //拉低时钟线
 264   2              Delay5us();             //延时
 265   2          }
 266   1          return dat;
 267   1      }
 268          
 269          //******单字节写入*******************************************
 270          
 271          void Single_Write_ADXL345(uchar REG_Address,uchar REG_data)
 272          {
 273   1          ADXL345_Start();                  //起始信号
 274   1          ADXL345_SendByte(SlaveAddress);   //发送设备地址+写信号
 275   1          ADXL345_SendByte(REG_Address);    //内部寄存器地址，请参考中文pdf22页 
 276   1          ADXL345_SendByte(REG_data);       //内部寄存器数据，请参考中文pdf22页 
 277   1          ADXL345_Stop();                   //发送停止信号
 278   1      }
 279          
 280          //********单字节读取*****************************************
 281          uchar Single_Read_ADXL345(uchar REG_Address)
 282          {  uchar REG_data;
 283   1          ADXL345_Start();                          //起始信号
 284   1          ADXL345_SendByte(SlaveAddress);           //发送设备地址+写信号
 285   1          ADXL345_SendByte(REG_Address);            //发送存储单元地址，从0开始       
 286   1          ADXL345_Start();                          //起始信号
 287   1          ADXL345_SendByte(SlaveAddress+1);         //发送设备地址+读信号
 288   1          REG_data=ADXL345_RecvByte();              //读出寄存器数据
 289   1              ADXL345_SendACK(1);   
 290   1              ADXL345_Stop();                           //停止信号
 291   1          return REG_data; 
 292   1      }
 293          //*********************************************************
 294          //
 295          //连续读出ADXL345内部加速度数据，地址范围0x32~0x37
 296          //
 297          //*********************************************************
 298          void Multiple_read_ADXL345(void)
 299          {   uchar i;
 300   1          ADXL345_Start();                          //起始信号
 301   1          ADXL345_SendByte(SlaveAddress);           //发送设备地址+写信号
 302   1          ADXL345_SendByte(0x32);                   //发送存储单元地址，从0x32开始    
 303   1          ADXL345_Start();                          //起始信号
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 6   

 304   1          ADXL345_SendByte(SlaveAddress+1);         //发送设备地址+读信号
 305   1               for (i=0; i<6; i++)                      //连续读取6个地址数据，存储中BUF
 306   1          {
 307   2              BUF[i] = ADXL345_RecvByte();          //BUF[0]存储0x32地址中的数据
 308   2              if (i == 5)
 309   2              {
 310   3                 ADXL345_SendACK(1);                //最后一个数据需要回NOACK
 311   3              }
 312   2              else
 313   2              {
 314   3                ADXL345_SendACK(0);                //回应ACK
 315   3             }
 316   2         }
 317   1          ADXL345_Stop();                          //停止信号
 318   1          Delay5ms();
 319   1      }
 320          
 321          
 322          //*****************************************************************
 323          
 324          //初始化ADXL345，根据需要请参考pdf进行修改************************
 325          void Init_ADXL345()
 326          {
 327   1         Single_Write_ADXL345(0x31,0x0B);   //测量范围,正负16g，13位模式
 328   1         Single_Write_ADXL345(0x2C,0x08);   //速率设定为12.5 参考pdf13页
 329   1         Single_Write_ADXL345(0x2D,0x08);   //选择电源模式   参考pdf24页
 330   1         Single_Write_ADXL345(0x2E,0x80);   //使能 DATA_READY 中断
 331   1         Single_Write_ADXL345(0x1E,0x00);   //X 偏移量 根据测试传感器的状态写入pdf29页
 332   1         Single_Write_ADXL345(0x1F,0x00);   //Y 偏移量 根据测试传感器的状态写入pdf29页
 333   1         Single_Write_ADXL345(0x20,0x05);   //Z 偏移量 根据测试传感器的状态写入pdf29页
 334   1      }
 335          //***********************************************************************
 336          //显示x轴
 337          void display_x()
 338          {   float temp;
 339   1          dis_data=(BUF[1]<<8)+BUF[0];  //合成数据   
 340   1              if(dis_data<0){
 341   2              dis_data=-dis_data;
 342   2          DisplayOneChar(10,0,'-');      //显示正负符号位
 343   2              }
 344   1              else DisplayOneChar(10,0,' '); //显示空格
 345   1      
 346   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 347   1              price +=  temp;
 348   1         // conversion(temp);          //转换出显示需要的数据
 349   1                      
 350   1              //      DisplayOneChar(8,0,'X');
 351   1          //DisplayOneChar(9,0,':'); 
 352   1          //DisplayOneChar(11,0,qian); 
 353   1              //      DisplayOneChar(12,0,'.'); 
 354   1          //DisplayOneChar(13,0,bai); 
 355   1          //DisplayOneChar(14,0,shi); 
 356   1              //      DisplayOneChar(15,0,' '); 
 357   1      }
 358          
 359          //***********************************************************************
 360          //显示y轴
 361          void display_y()
 362          {     float temp;
 363   1          dis_data=(BUF[3]<<8)+BUF[2];  //合成数据   
 364   1              if(dis_data<0){
 365   2              dis_data=-dis_data;
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 7   

 366   2          DisplayOneChar(2,1,'-');      //显示正负符号位
 367   2              }
 368   1              else DisplayOneChar(2,1,' '); //显示空格
 369   1      
 370   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 371   1         price +=  temp;
 372   1      }
 373          
 374          //***********************************************************************
 375          //显示z轴
 376          void display_z()
 377          {
 378   1          float temp;
 379   1          dis_data=(BUF[5]<<8)+BUF[4];    //合成数据   
 380   1              if(dis_data<0){
 381   2              dis_data=-dis_data;
 382   2          DisplayOneChar(10,1,'-');       //显示负符号位
 383   2              }
 384   1              else DisplayOneChar(10,1,' ');  //显示空格
 385   1      
 386   1          temp=(float)dis_data*3.9;  //计算数据和显示,查考ADXL345快速入门第4页
 387   1        price +=  temp;
 388   1      }
 389          
 390          
 391          //显示单价，单位为元，四位整数，两位小数
 392          void Display_Price()
 393          {
 394   1                  LCD1602_write_com(0x8c);
 395   1                              LCD1602_write_data(price/100 + 0x30);
 396   1                              LCD1602_write_data(price%100/10 + 0x30);
 397   1                              LCD1602_write_data('.');
 398   1                              LCD1602_write_data(price%10 + 0x30);
 399   1      }
 400          
 401          //显示重量，单位kg，两位整数，三位小数
 402          void Display_Weight()
 403          {
 404   1                  LCD1602_write_com(0x83);
 405   1                              LCD1602_write_data(Weight_Shiwu/1000 + 0x30);
 406   1                              LCD1602_write_data('.');
 407   1                              LCD1602_write_data(Weight_Shiwu%1000/100 + 0x30);
 408   1                              LCD1602_write_data(Weight_Shiwu%100/10 + 0x30);
 409   1                              LCD1602_write_data(Weight_Shiwu%10 + 0x30);
 410   1      }
 411          
 412          //显示总价，单位为元，四位整数，两位小数
 413          void Display_Money()
 414          {
 415   1        // unsigned int i,j;
 416   1      
 417   1         if (money>9999)      //超出显示量程
 418   1         {
 419   2           LCD1602_write_com(0x80+0x40+6);
 420   2           LCD1602_write_word("---.-");
 421   2            return;       
 422   2         }   
 423   1         
 424   1         if (money>=1000)
 425   1         {
 426   2             LCD1602_write_com(0x80+0x40+6);
 427   2                 LCD1602_write_data(money/1000 + 0x30);
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 8   

 428   2                 LCD1602_write_data(money%1000/100 + 0x30);
 429   2                 LCD1602_write_data(money%100/10 + 0x30);
 430   2                 LCD1602_write_data('.');
 431   2                 LCD1602_write_data(money%10 + 0x30);
 432   2         }
 433   1         else if (money>=100)
 434   1         {
 435   2             LCD1602_write_com(0x80+0x40+6);
 436   2                 LCD1602_write_data(0x20);
 437   2                 LCD1602_write_data(money%1000/100 + 0x30);
 438   2                 LCD1602_write_data(money%100/10 + 0x30);
 439   2                 LCD1602_write_data('.');
 440   2                 LCD1602_write_data(money%10 + 0x30);
 441   2         }
 442   1          else if(money>=10)
 443   1         {
 444   2             LCD1602_write_com(0x80+0x40+6);
 445   2                LCD1602_write_data(0x20);
 446   2                  LCD1602_write_com(0x80+0x40+7);
 447   2                 LCD1602_write_data(0x20);
 448   2                 LCD1602_write_data(money%100/10 + 0x30);
 449   2                 LCD1602_write_data('.');
 450   2                 LCD1602_write_data(money%10+ 0x30);
 451   2         }   
 452   1         else 
 453   1           {
 454   2             LCD1602_write_com(0x80+0x40+6);
 455   2                 LCD1602_write_data(0x20);
 456   2                 LCD1602_write_com(0x80+0x40+7);
 457   2                 LCD1602_write_data(0x20);
 458   2                 LCD1602_write_com(0x80+0x40+8);
 459   2                 LCD1602_write_data(0 + 0x30);
 460   2                 LCD1602_write_data('.');
 461   2                 LCD1602_write_data(money%10 + 0x30);
 462   2         }         
 463   1      }
 464          
 465          //数据初始化
 466          void Data_Init()
 467          {
 468   1         price = 0;
 469   1         DotPos = 0;
 470   1      }
 471          //定时器0初始化
 472          void Timer0_Init()
 473          {
 474   1              ET0 = 1;        //允许定时器0中断
 475   1              TMOD = 1;       //定时器工作方式选择
 476   1              TL0 = 0x06;     
 477   1              TH0 = 0xf8;     //定时器赋予初值
 478   1              TR0 = 1;        //启动定时器
 479   1      }
 480          
 481          //定时器0中断
 482          void Timer0_ISR (void) interrupt 1 using 0
 483          {
 484   1      uchar Counter;
 485   1              TL0 = 0x06;
 486   1              TH0 = 0xf8;     //定时器赋予初值
 487   1      
 488   1              //每0.5秒钟刷新重量
 489   1          Counter ++;
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 9   

 490   1          if (Counter >= 200)
 491   1          {
 492   2             FlagTest = 1;
 493   2                 Counter = 0;
 494   2          }
 495   1      }
 496          
 497          
 498          //按键响应程序，参数是键值
 499          //返回键值：
 500          //         7          8    9      10(清0)
 501          //         4          5    6      11(删除)
 502          //         1          2    3      12(未定义)
 503          //         14(未定义) 0    15(.)  13(确定价格)
 504          
 505          void KeyPress(uchar keycode)
 506          {
 507   1         switch (keycode)
 508   1         {
 509   2            case 0:
 510   2            case 1:
 511   2            case 2:
 512   2            case 3:
 513   2            case 4:
 514   2            case 5:
 515   2            case 6:
 516   2            case 7:
 517   2            case 8:
 518   2            case 9:
 519   2                   //目前在设置整数位，要注意price是整型，存储单位为分
 520   2                   if (DotPos == 0)
 521   2                       {  
 522   3                          //最多只能设置到千位
 523   3                              if (price<100)
 524   3                              {
 525   4                             price=price*10+keycode*10;
 526   4                              }
 527   3                       }
 528   2                       //目前在设置小数位
 529   2                       else if (DotPos==1)  //小数点后第一位
 530   2                       {
 531   3                          price=price+keycode;
 532   3                              DotPos=2;
 533   3                       }
 534   2                       Display_Price();
 535   2                   break;
 536   2            case 10:   //清零键
 537   2                   Get_Maopi();
 538   2                       Display_Price();
 539   2      //               FlagSetPrice = 0;
 540   2                       DotPos = 0;
 541   2                       break;
 542   2                case 11:      //删除键，按一次删除最右一个数字
 543   2                          price=0;
 544   2                              DotPos=0;
 545   2                       Display_Price();
 546   2               break;
 547   2                       ////////////////////////////////////
 548   2                case 12:
 549   2                       break;
 550   2      
 551   2      
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 10  

 552   2                       //////////////////////////////////////
 553   2      //      case 13:   //确认键
 554   2      //           FlagSetPrice = 1;
 555   2      //               DotPos=0;
 556   2      //               break;
 557   2                case 15:   //小数点按下 
 558   2                              DotPos = 1;      //小数点后第一位
 559   2                   break;
 560   2      
 561   2         }
 562   1      }
 563          //****************************************************
 564          //主函数
 565          //****************************************************
 566          void main()
 567          {
 568   1      
 569   1              Init_LCD1602();                                                                 //初始化LCD1602
 570   1         EA = 0;
 571   1         Data_Init();
 572   1         Timer0_Init();
 573   1         //初中始化完成，开断
 574   1         EA = 1;
 575   1              
 576   1      //      Get_Maopi();
 577   1              LCD1602_write_com(0x80);                                                //指针设置
 578   1         LCD1602_write_word(" Welcome To Use ");      //  
 579   1         LCD1602_write_com(0x80+0x40);                                                //指针设置
 580   1         LCD1602_write_word("Wlectronic Scale");
 581   1      //   Delay_ms(2000);
 582   1         Get_Maopi();
 583   1         LCD1602_write_com(0x80);                                             //指针设置
 584   1         LCD1602_write_word("WE:0.000 PR:00.0");
 585   1         LCD1602_write_com(0x80+0x40);                                //指针设置
 586   1         LCD1602_write_word("MONEY:  0.00    ");
 587   1         Display_Price();
 588   1      //      Get_Maopi();                            //称毛皮重量
 589   1      
 590   1              while(1)
 591   1              {
 592   2      //每0.5秒称重一次
 593   2                if (FlagTest==1)
 594   2                {
 595   3                              Get_Weight();
 596   3                              FlagTest = 0;
 597   3      
 598   3              }                       
 599   2                      
 600   2                keycode = Getkeyboard();
 601   2                //有效键值0-15
 602   2                if (keycode<16/*&&(FlagKeyPress==0)*/)
 603   2                {
 604   3                   
 605   3                       KeyPress(keycode);
 606   3                       
 607   3                       Buzzer=0;
 608   3                       Delay_ms(50);
 609   3                       Buzzer=1;
 610   3              //       FlagKeyPress = 1;
 611   3                       Delay_ms(200);
 612   3                }
 613   2              }
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 11  

 614   1      }
 615          
 616          
 617          
 618          //****************************************************
 619          //称重
 620          //****************************************************
 621          void Get_Weight()
 622          {
 623   1              uchar devid;
 624   1              Init_ADXL345();                         //初始化ADXL345
 625   1                      devid=Single_Read_ADXL345(0X00);        //读出的数据为0XE5,表示正确
 626   1                      if(devid!=0XE5)
 627   1                      {       
 628   2                              price = 0;              
 629   2                      }else
 630   1                      {                       
 631   2                              Multiple_Read_ADXL345();        //连续读出数据，存储在BUF中
 632   2                              price = 0;      
 633   2                              display_x();                    //---------显示X轴
 634   2                              display_y();                    //---------显示Y轴
 635   2                              display_z();                    //---------显示Z轴                          
 636   2                      }      
 637   1              Weight_Shiwu = HX711_Read();
 638   1              Weight_Shiwu = Weight_Shiwu - Weight_Maopi;             //获取净重
 639   1              
 640   1              Weight_Shiwu = (unsigned int)((float)Weight_Shiwu/GapValue);    //计算实物的实际重量                                                                                                                            
 641   1              if(Weight_Shiwu > 10000)                //超重报警
 642   1              {
 643   2                      Buzzer = 0;     
 644   2                      LED=0;
 645   2                      LCD1602_write_com(0x83);
 646   2                 LCD1602_write_word("-.---");
 647   2              }
 648   1              else
 649   1              {
 650   2                      if(Weight_Shiwu==0)
 651   2                      LED=1;
 652   2                      else if(Weight_Shiwu>0)
 653   2                      LED=0; 
 654   2                      Buzzer = 1;
 655   2                      Display_Weight();
 656   2                      price = price*10;
 657   2                      money = Weight_Shiwu*(price)/1000;  //money单位为分
 658   2                     //显示总金额
 659   2                         Display_Price();
 660   2                     Display_Money();
 661   2              }
 662   1      }
 663          
 664          //****************************************************
 665          //获取毛皮重量
 666          //****************************************************
 667          void Get_Maopi()
 668          {
 669   1      mm:     Weight_Maopi_0 = HX711_Read();
 670   1              Delay_ms(200);
 671   1              Weight_Maopi = HX711_Read();
 672   1              if(Weight_Maopi/GapValue!=Weight_Maopi_0/GapValue)
 673   1              goto mm;
 674   1      } 
 675          
C51 COMPILER V9.01   MAIN                                                                  11/23/2017 17:16:56 PAGE 12  

 676          //****************************************************
 677          //MS延时函数(12M晶振下测试)
 678          //****************************************************
 679          void Delay_ms(unsigned int n)
 680          {
 681   1              unsigned int  i,j;
 682   1              for(i=0;i<n;i++)
 683   1                      for(j=0;j<123;j++);
 684   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2151    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33      14
   IDATA SIZE       =      8    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
